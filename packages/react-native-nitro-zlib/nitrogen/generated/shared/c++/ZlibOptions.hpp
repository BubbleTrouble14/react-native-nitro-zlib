///
/// ZlibOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <optional>
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::rnzlib {

  /**
   * A struct which can be represented as a JavaScript object (ZlibOptions).
   */
  struct ZlibOptions {
  public:
    std::optional<double> flush     SWIFT_PRIVATE;
    std::optional<double> finishFlush     SWIFT_PRIVATE;
    std::optional<double> chunkSize     SWIFT_PRIVATE;
    std::optional<double> windowBits     SWIFT_PRIVATE;
    std::optional<double> level     SWIFT_PRIVATE;
    std::optional<double> memLevel     SWIFT_PRIVATE;
    std::optional<double> strategy     SWIFT_PRIVATE;
    std::optional<std::shared_ptr<ArrayBuffer>> dictionary     SWIFT_PRIVATE;
    std::optional<bool> info     SWIFT_PRIVATE;
    std::optional<double> maxOutputLength     SWIFT_PRIVATE;

  public:
    explicit ZlibOptions(std::optional<double> flush, std::optional<double> finishFlush, std::optional<double> chunkSize, std::optional<double> windowBits, std::optional<double> level, std::optional<double> memLevel, std::optional<double> strategy, std::optional<std::shared_ptr<ArrayBuffer>> dictionary, std::optional<bool> info, std::optional<double> maxOutputLength): flush(flush), finishFlush(finishFlush), chunkSize(chunkSize), windowBits(windowBits), level(level), memLevel(memLevel), strategy(strategy), dictionary(dictionary), info(info), maxOutputLength(maxOutputLength) {}
  };

} // namespace margelo::nitro::rnzlib

namespace margelo::nitro {

  using namespace margelo::nitro::rnzlib;

  // C++ ZlibOptions <> JS ZlibOptions (object)
  template <>
  struct JSIConverter<ZlibOptions> {
    static inline ZlibOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return ZlibOptions(
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "flush")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "finishFlush")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "chunkSize")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "windowBits")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "level")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "memLevel")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "strategy")),
        JSIConverter<std::optional<std::shared_ptr<ArrayBuffer>>>::fromJSI(runtime, obj.getProperty(runtime, "dictionary")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "info")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "maxOutputLength"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const ZlibOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "flush", JSIConverter<std::optional<double>>::toJSI(runtime, arg.flush));
      obj.setProperty(runtime, "finishFlush", JSIConverter<std::optional<double>>::toJSI(runtime, arg.finishFlush));
      obj.setProperty(runtime, "chunkSize", JSIConverter<std::optional<double>>::toJSI(runtime, arg.chunkSize));
      obj.setProperty(runtime, "windowBits", JSIConverter<std::optional<double>>::toJSI(runtime, arg.windowBits));
      obj.setProperty(runtime, "level", JSIConverter<std::optional<double>>::toJSI(runtime, arg.level));
      obj.setProperty(runtime, "memLevel", JSIConverter<std::optional<double>>::toJSI(runtime, arg.memLevel));
      obj.setProperty(runtime, "strategy", JSIConverter<std::optional<double>>::toJSI(runtime, arg.strategy));
      obj.setProperty(runtime, "dictionary", JSIConverter<std::optional<std::shared_ptr<ArrayBuffer>>>::toJSI(runtime, arg.dictionary));
      obj.setProperty(runtime, "info", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.info));
      obj.setProperty(runtime, "maxOutputLength", JSIConverter<std::optional<double>>::toJSI(runtime, arg.maxOutputLength));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "flush"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "finishFlush"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "chunkSize"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "windowBits"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "level"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "memLevel"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "strategy"))) return false;
      if (!JSIConverter<std::optional<std::shared_ptr<ArrayBuffer>>>::canConvert(runtime, obj.getProperty(runtime, "dictionary"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "info"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "maxOutputLength"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
